/*

	Credits to Talow for this code

*/
using System;
using System.Collections;
using System.Collections.Generic;
using Server.Network;
using Server.Mobiles;
using Server.Items;
using Server.Misc;
using Server.Engines.XmlSpawner2;
using Server.ContextMenus;

namespace Server.Gumps 
{
	public class PreFabGump
	{
		public static void AddLabelAlnRight(Gump g, int x, int y, int hue, string s)
		{
			g.AddLabel(x - StringWitdth(s), y, hue, s);
		}
		
		public static void AddLabelAlnCenter(Gump g, int x, int y, int hue, string s)
		{
			g.AddLabel(x - (StringWitdth(s) / 2), y, hue, s);
		}
		
		public static void AddLabelTest(Gump g, int x, int y, int hue, string s, int height, int width, int imageid)
		{
			g.AddImageTiled(x - (StringWitdth(s) / 2), y, height, width, imageid);
			g.AddLabel(x - (StringWitdth(s) / 2), y, hue, s);
		}
		
		public static void AddTextEntryPreFab( Gump g, int imageid, int x, int y, int width, int height, int hue, int entryID, string initialText, int size, string name = "")
		{
			g.AddImageTiled( x, y, width, height, imageid);
			g.AddTextEntry( x, y, width, height, hue, entryID, initialText, size, null, name );
		}
		
		public static void AddTextEntryMinMax( Gump g, string s, int imageid, int x, int y, int hue, int entryIdMin, int entryIdMax, string initialText, int size, string name = "")
		{
			//Label
			g.AddLabel(x, y, hue, s);
			
			// Min
			g.AddImageTiled( (x + 10 -  (StringWitdth(s) / 2)) + 35 , y -1 , /*height*/ 52, /*width*/ 20, imageid);
			g.AddTextEntry( (x + 10 - (StringWitdth(s) / 2))+ 35 , y- 1 , 52, 20, hue, entryIdMin, initialText, size, null, name );
			
			// Max
			g.AddImageTiled( (x + 10 - (StringWitdth(s) / 2)) + 97 , y -1 , 52, 20, imageid);
			g.AddTextEntry( (x + 10 - (StringWitdth(s) / 2)) + 97 , y -1 , 52, 20, hue, entryIdMax, initialText, size, null, name );
		}
		
		
		public static int StringWitdth(String s)
		{
			Dictionary<string, int> sw = m_stringWidth();
			
			int tot = 0;
			foreach(char b in s)
			{
				string a = b.ToString();
				if(sw.ContainsKey(a))
					tot += sw[a];
			}
			
			return tot;
		}
		
		private static Dictionary<string, int> m_stringWidth()
		{
			Dictionary<string, int> d = new Dictionary<string, int>();
			d.Add("A",9);
			d.Add("B",9);
			d.Add("C",9);
			d.Add("D",9);
			d.Add("E",8);
			d.Add("F",8);
			d.Add("G",9);
			d.Add("H",9);
			d.Add("I",4);
			d.Add("J",9);
			d.Add("K",9);
			d.Add("L",8);
			d.Add("M",11);
			d.Add("N",9);
			d.Add("O",9);
			d.Add("P",9);
			d.Add("Q",10);
			d.Add("R",9);
			d.Add("S",9);
			d.Add("T",8);
			d.Add("U",9);
			d.Add("V",9);
			d.Add("W",13);
			d.Add("X",9);
			d.Add("Y",11);
			d.Add("Z",9);
			d.Add("a",7);
			d.Add("b",7);
			d.Add("c",7);
			d.Add("d",7);
			d.Add("e",7);
			d.Add("f",7);
			d.Add("g",7);
			d.Add("h",7);
			d.Add("i",4);
			d.Add("j",7);
			d.Add("k",7);
			d.Add("l",4);
			d.Add("m",10);
			d.Add("n",7);
			d.Add("o",7);
			d.Add("p",7);
			d.Add("q",7);
			d.Add("r",7);
			d.Add("s",7);
			d.Add("t",7);
			d.Add("u",7);
			d.Add("v",7);
			d.Add("w",9);
			d.Add("x",7);
			d.Add("y",7);
			d.Add("z",7);
			d.Add("0",9);
			d.Add("1",5);
			d.Add("2",9);
			d.Add("3",9);
			d.Add("4",9);
			d.Add("5",9);
			d.Add("6",9);
			d.Add("7",9);
			d.Add("8",9);
			d.Add("9",9);
			d.Add("!",4);
			d.Add("@",13);
			d.Add("#",13);
			d.Add("$",10);
			d.Add("%",10);
			d.Add("^",10);
			d.Add("&",12);
			d.Add("*",11);
			d.Add("(",5);
			d.Add(")",5);
			d.Add("-",6);
			d.Add("_",9);
			d.Add("=",7);
			d.Add("+",10);
			d.Add("\\",10);
			d.Add("|",3);
			d.Add("]",6);
			d.Add("}",6);
			d.Add("[",5);
			d.Add("{",5);
			d.Add("'",4);
			d.Add("\"",5);
			d.Add(";",4);
			d.Add(":",4);
			d.Add("/",10);
			d.Add("?",8);
			d.Add(".",4);
			d.Add(">",9);
			d.Add(",",4);
			d.Add("<",8);
			d.Add("`",4);
			d.Add("~",7);
			d.Add(" ",3);
			return d;
		}

	}
}